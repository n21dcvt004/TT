#include <stdint.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_rcc.h>
#include <typedefs.h>
#include <Ucglib.h>
#define	HIGH								0
#define BTN_PRESS							0
// Define Logic GPIO_PIN
/***********************************************************************************/
#define CYCLE_SEND_DATA_1 1000 // ms

#define CYCLE_SEND_DATA_2 2000 // ms



/*Defined SPI **********************************************************************/

#define SPI1_CS_PORT           				 GPIOB
#define SPI1_CS_PIN            				 GPIO_Pin_6


#define SPI1_RST_PORT          				 GPIOC
#define SPI1_RST_PIN           				 GPIO_Pin_7

#define SPI1_MOSI_PORT         				 GPIOA
#define SPI1_MOSI_PIN          				 GPIO_Pin_7

#define SPI1_SCK_PORT          				 GPIOA
#define SPI1_SCK_PIN           				 GPIO_Pin_5

#define SPI1_RS_PORT           				 GPIOA
#define SPI1_RS_PIN            				 GPIO_Pin_9

#define SPI1_ENABLE_PORT       				 GPIOB
#define SPI1_ENABLE_PIN        				 GPIO_Pin_10

#define SPI1_MODE_PORT          			 GPIOA
#define SPI1_MODE_PIN           			 GPIO_Pin_8

/*Defined I2C ******************************************************************/

#define I2Cx_RCC							 RCC_APB1Periph_I2C1
#define I2Cx_SENSOR							 I2C1
#define I2C_GPIO_RCC		    			 RCC_AHB1Periph_GPIOB
#define I2C_GPIO							 GPIOB
#define I2C_PIN_SDA			    		 	 GPIO_Pin_9
#define I2C_PIN_SCL			    			 GPIO_Pin_8

/*Defined SENSOR ***************************************************************/

#define SI7020_ADDR                          0x40
#define CMDR_MEASURE_VALUE                   0xE0

#define GPIO_PIN_SET						1
#define GPIO_PIN_RESET						0
#define GPIO_PIN_LOW						0
#define GPIO_PIN_HIGH						1

// Define GPIO PIN

#define BUZZER_GPIO_PORT					GPIOC
#define BUZZER_GPIO_PIN						GPIO_Pin_9
#define BUZZERControl_SetClock				RCC_AHB1Periph_GPIOC

#define BUTTON_GPIO_PORT					GPIOB
#define BUTTON_GPIO_PIN						GPIO_Pin_3
#define BUTTONControl_SetClock				RCC_AHB1Periph_GPIOB

// Define GPIO PIN

#define LEDRED_GPIO_PORT					GPIOB
#define LEDRED_GPIO_PIN						GPIO_Pin_13
#define LEDRED_PIN9							13
#define LEDREDControl_SetClock				RCC_AHB1Periph_GPIOB

#define LEDBLUE_GPIO_PORT					GPIOA
#define LEDBLUE_GPIO_PIN						GPIO_Pin_10
#define LEDBLUE_PIN9							10
#define LEDBLUEControl_SetClock				RCC_AHB1Periph_GPIOA

#define LEDGREEN_GPIO_PORT					GPIOA
#define LEDGREEN_GPIO_PIN						GPIO_Pin_11
#define LEDGREEN_PIN9							11
#define LEDGREENControl_SetClock				RCC_AHB1Periph_GPIOA

#define BUTTON_GPIO_PORT					GPIOB
#define BUTTON_GPIO_PIN						GPIO_Pin_3
#define BUTTON_PIN3							3
#define BUTTONControl_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON3_GPIO_PORT					GPIOA
#define BUTTON3_GPIO_PIN						GPIO_Pin_4
#define BUTTON3Control_SetClock				RCC_AHB1Periph_GPIOA

#define BUTTON5_GPIO_PORT					GPIOB
#define BUTTON5_GPIO_PIN						GPIO_Pin_4
#define BUTTON5Control_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON4_GPIO_PORT					GPIOB
#define BUTTON4_GPIO_PIN						GPIO_Pin_0
#define BUTTON4_PIN0							0
#define BUTTON4Control_SetClock				RCC_AHB1Periph_GPIOB


/******************************************************************************/
/*                              PRIVATE DATA                                  */
/******************************************************************************/

/******************************************************************************/
/*                              EXPORTED DATA                                 */
/******************************************************************************/

/******************************************************************************/
/*                            PRIVATE FUNCTIONS                               */
/******************************************************************************/
static void_t buzzer_Init(void_t);
static void_t button_Init(void_t);
static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin, u8_t byStatus);
static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin);
/*Privated Function ************************************************************/
uint16_t AdcValue=0;
static uint16_t lightLevelAfterFilter = 0;
static uint16_t Kanman_light=0;
static char src5[20] = "";
static ucg_t ucg;
static void AppInitCommon(void);
static void AppCommon();
static void SPI1_Init(void);
static void AppInitCommon(void);
static void LightSensor_AdcInit(void);
static void LedControl_TimerOCInit(void);
uint16_t LightSensor_AdcPollingRead(void);
uint16_t Kanman_Light(uint16_t lightLevel);
static void LedControl_TimerOCSetPwm(uint32_t Compare);
static void ABL_Process(void);
static void ABL_Process(void);
static void I2C_Init_temphumi(void);
void I2C_start(void);
void I2C_address_direction(uint8_t address, uint8_t direction);
void I2C_transmit(uint8_t byte);
void I2C_stop(void);
uint8_t I2C_receive_nack(void);
uint8_t I2C_receive_ack(void);
static void TemHumSensor_readRegister(
		uint8_t address,
	    uint8_t* pAddressRegister,
	    uint8_t* pDataRegister,
	    uint8_t Length_Data,
	    uint16_t delay);
void processGetValueSensor(void);
uint32_t GetTemp_Sensor(void);
uint32_t GetHumi_Sensor(void);
void delay_ms(uint32_t ms);
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent);
void Scan_SensorLCD(void);
void Scan_TimeSensor(uint32_t byRepeats);
/* Private variables ---------------------------------------------------------*/
static ucg_t ucg;
uint32_t time_initial = 0;
uint32_t time_current, time_initial;
uint32_t idTimer = 0;
static char src1[20] = "";
static char src2[20] = "";
static char src3[20] = "";
static char src4[20] = "";
static uint32_t time_total;
static uint8_t temperature, humidity;
static uint8_t temperature1, humidity1;
//static uint8_t temperature2, humidity2;

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
void_t delay();
/******************************************************************************/

static void LEDRED_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDREDControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDRED_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDRED_GPIO_PORT, &GPIO_InitStructure);

}
static void LEDBLUE_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUEControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDBLUE_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE_GPIO_PORT, &GPIO_InitStructure);
}
static void LEDGREEN_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREENControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDGREEN_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN_GPIO_PORT, &GPIO_InitStructure);

}


static void LEDREDControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}
static void LEDBLUEControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}

static void LEDGREENControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}

/**
 * @func   delay
 * @brief  use when you want to delay
 * @param  None
 * @retval None
 */
void_t delay() {
	for (u32_t i = 0; i < 500000; i++);
}
void_t delay1() {
	for (u32_t i = 0; i < 100000; i++);
}

/**
 * @func   buzzer_Init
 * @brief  Initialize GPIO for buzzer
 * @param  None
 * @retval None
 */
static void_t buzzer_Init(void_t) {
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;


	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);

}

/**
 * @func   button_Init
 * @brief  Initialize GPIO for button
 * @param  None
 * @retval None
 */
static void_t button_Init(void_t) {

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;


	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
}
static void_t button4_Init(void_t) {

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUTTON4_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;


	GPIO_Init(BUTTON4_GPIO_PORT, &GPIO_InitStructure);
}
static void_t button3_Init(void_t) {

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON3Control_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUTTON3_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;


	GPIO_Init(BUTTON3_GPIO_PORT, &GPIO_InitStructure);
}
static void_t button5_Init(void_t) {

	GPIO_InitTypeDef GPIO_InitStructure;



	RCC_AHB1PeriphClockCmd(BUTTON5Control_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUTTON5_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;


	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;


	GPIO_Init(BUTTON5_GPIO_PORT, &GPIO_InitStructure);
}

/**
 * @func   buzzerControlSetStatus
 * @brief  control status buzzer
 * @param  Port, pin
 * @retval None
 */
static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin,
		u8_t byStatus) {
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
		pGPIOx->BSRRL = wGPIO_Pin;
	}
	if (byStatus == GPIO_PIN_RESET) {
		pGPIOx->BSRRH = wGPIO_Pin;
	}
}

/**
 * @func   buttonReadStatus
 * @brief  Read status of button
 * @param  Port, Pin
 * @retval u8_t
 */
static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin) {
	u8_t Read_Pin = Bit_RESET;

	if ((pGPIOx->IDR & wGPIO_Pin) != (u32_t) Bit_RESET) {
		Read_Pin = (u8_t) Bit_SET;
	} else {
		Read_Pin = (u8_t) Bit_RESET;
	}
	return Read_Pin;
}

int main(void_t) {

	AppCommon();
	AppInitCommon();
	u8_t byStatus = 1;
	u8_t Status = 1;
	u8_t press5 = 1;
	buzzer_Init();
	button_Init();
	button4_Init();
	button3_Init();
	button5_Init();
	LEDRED_init();
	LEDBLUE_init();
	LEDGREEN_init();
	while (1) {
		ABL_Process(); // thay Ä‘á»•i Ä‘á»™ sÃ¡ng cá»§a led RGB theo cÆ°á»ng Ä‘á»™ Ã¡nh sÃ¡ng vá»›i chu ká»³ 100 ms.
				processGetValueSensor();
				processTimerScheduler();

		 // Kiểm tra trạng thái của nút bấm 1
				        if (buttonReadStatus(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) {
				        	buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
				        	delay1();
				            byStatus= 0; // cài trạng thái là 0

				            }

				        // Kiểm tra trạng thái của nút bấm 4
				        if (buttonReadStatus(BUTTON4_GPIO_PORT, BUTTON4_GPIO_PIN) == BTN_PRESS) {
				        	delay1();
				            byStatus = 1;

				        }

		if (buttonReadStatus(BUTTON3_GPIO_PORT, BUTTON3_GPIO_PIN) == BTN_PRESS) {
					delay();
					Status++;
		}
		if (buttonReadStatus(BUTTON5_GPIO_PORT, BUTTON5_GPIO_PIN) == BTN_PRESS) {
					delay();
					press5 ++;
		}
		if(Status % 2 == 0){
			LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
		} else {
			LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
		}
		if(press5 % 2 ==0){
			LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
		} else {
			LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
		}
		if (byStatus % 2 == 0) {


			delay1();
			buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
			LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
			delay1();
			LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
			delay1();
			LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
		    delay1();
			LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
			delay1();
			LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_HIGH);
			delay1();
			LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
		} else {
			delay1();
			buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
			LEDREDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
			LEDBLUEControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
			LEDGREENControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
		}
	}
	return 0;
}
void delay_ms(uint32_t ms) {

	uint32_t startTime = GetMilSecTick(); //LÆ°u láº¡i thá»i Ä‘iá»ƒm hiá»‡n táº¡i.
	while (CalculatorTime(startTime, GetMilSecTick()) <= ms)
		;

}
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent) {
	uint32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
	}
	return dwTimeTotal;

}

/**
 * @func   AppCommon
 * @brief  Init everything
 * @param  None
 * @retval None
 */
static void AppCommon()
{
	SystemCoreClockUpdate();
	TimerInit();
    SPI1_Init();
    I2C_Init_temphumi();
    TemHumSensor_Init();
    Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); //lÃ  hÃ m khá»Ÿi táº¡o LCD.
    ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
    ucg_SetColor(&ucg, 0, 255, 255, 255);
    ucg_SetColor(&ucg, 1, 0, 0, 0);
    ucg_SetRotate180(&ucg);
    Scan_TimeSensor(50);
    time_initial = GetMilSecTick();
}




/**
 * @func   Kanman_Light
 * @brief  Use Kanman filter for Light Sensor
 * @param  None
 * @retval None


/**
 * @func   SPI1_Init
 * @brief  Init SPI
 * @param  None
 * @retval None
 */
static void SPI1_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;

		GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN | SPI1_MODE_PIN;
		GPIO_Init(GPIOA, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
		GPIO_Init(GPIOB, &GPIO_InitStructure);

		GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
		GPIO_Init(GPIOC, &GPIO_InitStructure);
	}

	/**
	 * @func   I2C_Init_temphumi
	 * @brief  Init I2C temp and humi
	 * @param  None
	 * @retval None
	 */
	static void I2C_Init_temphumi(void)
	{
	// Initialization struct
		I2C_InitTypeDef I2C_InitStruct;
		GPIO_InitTypeDef GPIO_InitStruct;

		// Step 1: Initialize I2C
		RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
		I2C_InitStruct.I2C_ClockSpeed = 400000;
		I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
		I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
		I2C_InitStruct.I2C_OwnAddress1 = 0x00;
		I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
		I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
		I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
		I2C_Cmd(I2Cx_SENSOR, ENABLE);

		// Step 2: Initialize GPIO as open drain alternate function
		RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
		GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
		GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
		GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
		GPIO_Init(I2C_GPIO, &GPIO_InitStruct);

		/* Connect PXx to I2C_SCL */
		GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);

		/* Connect PXx to I2C_SDA */
		GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
	}

	/*
	 * @func    I2C_start
	 * @brief   Generate I2C start condition
	 * @param   None
	 * @retval  None
	 */
	void I2C_start(void)
	{
		// Wait until I2Cx is not busy anymore
		while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY));

		// Generate start condition
		I2C_GenerateSTART(I2Cx_SENSOR, ENABLE);

		// Wait for I2C EV5.
		// It means that the start condition has been correctly released
		// on the I2C bus (the bus is free, no other devices is communicating))
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT));
	}

	/**
	 * @func    I2C_address_direction
	 * @brief   e
	 * @param   None
	 * @retval  None
	 */
	void I2C_address_direction(uint8_t address, uint8_t direction)
	{
		// Send slave address
		I2C_Send7bitAddress(I2Cx_SENSOR, address, direction);

		// Wait for I2C EV6
		// It means that a slave acknowledges his address
		if (direction == I2C_Direction_Transmitter)		// truyá»n
		{
			while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
		}
		else if (direction == I2C_Direction_Receiver)  // nháº¬n
		{
			while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
		}
	}

	/**
	 * @func    I2C_transmit
	 * @brief   Transmit one byte to I2C bus
	 * * @param   None
 * @retval  None
 */
void I2C_transmit(uint8_t byte)
{
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte);
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
}

/**
 * @func    I2C_stop
 * @brief   Generate I2C stop condition
 * @param   None
 * @retval  None
 */
void I2C_stop(void)
{
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
}

/**
 * @func    I2C_receive_nack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_nack(void)
{
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
}


/**
 * @func    I2C_receive_ack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_ack(void)
{
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
}

/**
 * @func    TemHumSensor_readRegister
 * @brief   communicate register in sensor
 * @param   None
 * @retval  None
 */
static void TemHumSensor_readRegister(
		uint8_t address,
	    uint8_t* pAddressRegister, // Äá»‹a chá»‰ cá»§a thanh ghi chá»©a dá»¯ liá»‡u nhiá»‡t Ä‘á»™, Ä‘á»™ áº©m.
	    uint8_t* pDataRegister, // Dá»¯ liá»‡u Ä‘á»c Ä‘Æ°á»£c tá»« thanh ghi tÆ°Æ¡ng á»©ng.
	    uint8_t Length_Data, //Äá»™ dÃ i Dá»¯ liá»‡u Ä‘á»c Ä‘Æ°á»£c tá»« thanh ghi tÆ°Æ¡ng á»©ng.
	    uint16_t delay)	//Dá»¯ liá»‡u Ä‘á»c Ä‘Æ°á»£c tá»« thanh ghi tÆ°Æ¡ng á»©ng.
{
	uint8_t LengthCmd = pAddressRegister[0];

	I2C_start();	// conditon start
	I2C_address_direction(address << 1, I2C_Direction_Transmitter); // send slave address - Transmit

	for (uint8_t i = 1; i < LengthCmd; i++) {
		I2C_transmit(pAddressRegister[i]);		// Send Data from register
	}

    if (delay > 0) {
        delay_ms(delay);
    }

	I2C_stop();// condition stop

	I2C_start(); // condition start
	I2C_address_direction(address << 1, I2C_Direction_Receiver); // send slave address - Received

	for (uint8_t i = 0; i < Length_Data; i++)
	{
		if (i == (Length_Data - 1))
		{
			pDataRegister[i] = I2C_receive_nack();  // 	NA
		}
		else
		{
			pDataRegister[i] = I2C_receive_ack();   // A
		}
	}
	I2C_stop();

}


/**
 * @func    GetTemp_Sensor
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t GetTemp_Sensor(void)
{
	uint32_t RT;
    uint8_t pRT[3] = { 0 };	// pRT[0]: MSB		pRT[1]: LSB

    uint8_t CMD_MEASURE_TEMP[2] =  { 2, 0xE3 }; // gá»¬i Ä‘á»™ dÃ i byte cáº§n truyá»n vÃ  CMD_MEASURE cháº¿ Ä‘á»™ HOLD MASTER MODE

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_TEMP, pRT, 3, 4);

    RT = (pRT[0] << 8) + pRT[1];			// RT_CODE (MSB << 8) + LSB		// Temp = ((17572* RT)/(0xFFu +1) - 4685)/100
    RT = ((RT * 17572) >> 16) - 4685;
    RT = RT/100;
    return RT;
}


/**
 * @func    GetHumi_Sensor
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t GetHumi_Sensor(void)
{
	uint32_t RH;
	uint8_t pRH[3] = { 0 };


	uint8_t CMD_MEASURE_HUMI[2] =  { 2, 0xE5 }; // gá»¬i Ä‘á»™ dÃ i byte cáº§n truyá»n vÃ  CMD_MEASURE cháº¿ Ä‘á»™ HOLD MASTER MODE

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_HUMI, pRH, 3, 8);

    RH = (pRH[0] << 8) + pRH[1]; // RH_CODE (MSB << 8) + LSB
    RH = ((RH * 12500) >> 16) - 600;
    RH = RH/100;

    return RH;
}


/**
 * @func 	processGetValueSensor
 * @brief	Get value sensor
 * @param	None
 * @retval	None
 */
void processGetValueSensor(void) {
	// Get timer
	time_current = GetMilSecTick();

	if (time_current >= time_initial) {
		time_total += time_current - time_initial;
	} else {
		time_total += 0xFFFFFFFFU - time_current + time_initial;
	}
	if (time_total == CYCLE_SEND_DATA_1) {
		//DÃ¹ng Ä‘á»ƒ Ä‘á»c giÃ¡ trá»‹ nhiá»‡t Ä‘á»™ tráº£ vá» tá»« cáº£m biáº¿n thÃ´ng qua giao tiáº¿p I2C.
		temperature = (uint8_t) (GetTemp_Sensor());

		//DÃ¹ng Ä‘á»ƒ Ä‘á»c giÃ¡ trá»‹ Ä‘á»™ áº©m tráº£ vá» tá»« cáº£m biáº¿n thÃ´ng qua giao tiáº¿p I2C.
		humidity = (uint8_t) (GetHumi_Sensor());

	}
	if(time_total >= CYCLE_SEND_DATA_2)
	{
		temperature1 = (uint8_t) (GetTemp_Sensor());

		humidity1 = (uint8_t) (GetHumi_Sensor());

		// náº¿u thá»i gian chÃªnh lá»‡ch giá»¯a láº§n Ä‘o 1 vÃ  láº§n Ä‘o 2 lÃ  2 thÃ¬ sáº½ cáº¬p nháº¬t giÃ¡ trá»‹ sensor
		if( ((temperature1 > temperature ) && (temperature1 - temperature >= 2))
		 || ((temperature1 < temperature ) && (temperature1 - temperature <= 2))
		 || ((humidity1 > humidity ) && (humidity1 - humidity >= 2))
		 || ((humidity1 < humidity ) && (humidity1 - humidity <= 2)))
		{
			ucg_DrawString(&ucg, 0, 32, 0, "NHOM 2");
			memset(src1, 0, sizeof(src1));
			sprintf(src1, " Temp = %d oC  ", temperature1);
			ucg_DrawString(&ucg, 0, 52, 0, src1);

			memset(src2, 0, sizeof(src2));
			sprintf(src2, " Humi = %3d %%   ", humidity1);
			ucg_DrawString(&ucg, 0, 72, 0, src2);
		}

		time_total = 0;
		// Reset láº¡i biáº¿n thá»i gian sau quÃ¡ trÃ¬nh Ä‘á»c giÃ¡ trá»‹ nhiá»‡t Ä‘á»™ - Ä‘á»™ áº©m.

	}
	time_initial = time_current;



}

/**
* @func 	Scan_SensorLCD
* @brief	Scan display value sensor
* @param	None
* @retval	None
*/
void Scan_SensorLCD(void)
{
ucg_DrawString(&ucg, 0, 32, 0, "NHOM 2");
	memset(src3, 0, sizeof(src3));
	sprintf(src3, " Temp = %d oC  ", temperature);
	ucg_DrawString(&ucg, 0, 52, 0, src3);

	memset(src4, 0, sizeof(src4));
	sprintf(src4, " Humi = %3d %%   ", humidity);
	ucg_DrawString(&ucg, 0, 72, 0, src4);
}
/**
* @func 	Scan_1s
* @brief	Scan period 1s
* @param	None
* @retval	None
*/
void Scan_TimeSensor(uint32_t byRepeats)
{
	if (idTimer != NO_TIMER) {
	TimerStop(idTimer);
	}
	idTimer = TimerStart("Scan_sensor", byRepeats, TIMER_REPEAT_FOREVER, (void*) Scan_SensorLCD, NULL);
}

static void LightSensor_AdcInit(void)
{
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);

	/* ADC Deinit ***************************************************/
	ADC_DeInit();

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = 1;
	ADC_Init(ADC1, &ADC_InitStructure);

	//Polling Configure
	ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
	ADC_ContinuousModeCmd(ADC1, DISABLE);
	ADC_DiscModeChannelCountConfig(ADC1, 1);
	ADC_DiscModeCmd(ADC1, ENABLE);


	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
}

uint16_t LightSensor_AdcPollingRead(void)
{
	uint16_t result = 0;

	//  Báº¯t Ä‘áº§u quÃ¡ trÃ¬nh chuyá»ƒn Ä‘á»•i dá»¯ liá»‡u ADC.
	ADC_SoftwareStartConv(ADCx_SENSOR);

	// Äá»£i quÃ¡ trÃ¬nh chuyá»ƒn Ä‘á»•i Ä‘Æ°á»£c hoÃ n táº¥t Ä‘á»ƒ Ä‘á»c dá»¯ liá»‡u.
	while (ADC_GetFlagStatus(ADCx_SENSOR, ADC_FLAG_EOC) == RESET);

	// Read value
	result = ADC_GetConversionValue(ADCx_SENSOR);

	return result;

}
static void AppInitCommon(void)
{
	SystemCoreClockUpdate(); 	//Cáº¥p nguá»“n clock cho vi Ä‘iá»u khiá»ƒn lÃ  84 Mhz.
	TimerInit();				//Khá»Ÿi táº¡o timer sá»¬ dá»¥ng system tick.
	LightSensor_AdcInit();		//Khá»Ÿi táº¡o ngoáº¡i vi ADC á»Ÿ cháº¿ Ä‘á»™ Polling.
	KalmanFilterInit(2, 2, 0.001); // Khá»Ÿi táº¡o bá»™ lá»c Kalman
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
	ucg_SetFont(&ucg, ucg_font_ncenR10_hf);
	ucg_ClearScreen(&ucg);
	ucg_SetColor(&ucg, 0, 255, 255, 255);
	ucg_SetColor(&ucg, 1, 0, 0, 0);
	ucg_SetRotate180(&ucg);

}
uint16_t Kanman_Light(uint16_t lightLevel)
{
	lightLevelAfterFilter = KalmanFilter_updateEstimate(lightLevel);

	return lightLevelAfterFilter;
}
static void ABL_Process(void)
{
	uint32_t dwTimeCurrent;
	static uint32_t dwTimeTotal, dwTimeInit;

	dwTimeCurrent = GetMilSecTick();

	if(dwTimeCurrent >= dwTimeInit)
	{
		dwTimeTotal += dwTimeCurrent - dwTimeInit;
	}
	else
	{
		dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
	}

	if(dwTimeTotal >= 100)
	{
		dwTimeTotal = 0;
		AdcValue  = LightSensor_AdcPollingRead(); //Äá»c giÃ¡ trá»‹ ADC Ä‘o Ä‘Æ°á»£c tá»« cáº£m biáº¿n Ã¡nh sÃ¡ng
		Kanman_light = Kanman_Light(AdcValue);

		memset(src5, 0, sizeof(src5));
		sprintf(src5, " Light = %d lux  ", Kanman_light);
		ucg_DrawString(&ucg, 0, 92, 0, src5);
	}
	dwTimeInit = dwTimeCurrent;

}

